/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.senac.integrador.escola.modelos.telas.tela_professor;

import br.com.senac.integrador.escola.modelos.telas.tela_aluno.*;
import br.com.senac.integrador.escola.modelos.auxiliares.LoginSessionAlunos;
import br.com.senac.integrador.escola.modelos.auxiliares.LoginSessionProfessores;
import br.com.senac.integrador.escola.modelos.auxiliares.MySQL_Connection;
import java.awt.Color;
import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Jonathan
 */
public class page_turmas extends javax.swing.JInternalFrame {

    DefaultTableModel model_disciplina;
    DefaultTableModel model_turma;
    DefaultTableModel model_frequencia;
    DefaultTableModel model_desempenho;
    
    /**
     * Creates new form Inicio
     */
    public page_turmas() throws SQLException {
        initComponents();
        
        model_disciplina = (DefaultTableModel) table_disciplina.getModel();  
        model_turma = (DefaultTableModel) table_turma.getModel();  
        model_frequencia = (DefaultTableModel) table_frequencia.getModel();  
        model_desempenho = (DefaultTableModel) table_desempenho.getModel();  
              
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);
        getTurma();
        //getBoletim(LoginSessionProfessores.disciplina, ((int) table_turma.getValueAt(table_turma.getSelectedRow(), 0)), 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tab_inicio = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        table_disciplina = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        table_turma = new javax.swing.JTable();
        combo_sala = new javax.swing.JComboBox<>();
        combo_curso = new javax.swing.JComboBox<>();
        notas_button = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        table_desempenho = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        table_frequencia = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        falta_button = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setBorder(null);
        setPreferredSize(new java.awt.Dimension(590, 480));

        tab_inicio.setBackground(new java.awt.Color(67, 148, 222));
        tab_inicio.setPreferredSize(new java.awt.Dimension(590, 480));

        table_disciplina.setFont(new java.awt.Font("Segoe UI Semibold", 1, 10)); // NOI18N
        table_disciplina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Disciplina", "Tipo", "Trimestre", "Data", "Nota"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_disciplina.setToolTipText("");
        table_disciplina.setFocusable(false);
        table_disciplina.setGridColor(new java.awt.Color(0, 0, 0));
        table_disciplina.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table_disciplina.setPreferredSize(new java.awt.Dimension(278, 287));
        table_disciplina.setRowHeight(20);
        table_disciplina.setSelectionBackground(new java.awt.Color(232, 180, 88));
        table_disciplina.setShowGrid(true);
        table_disciplina.setShowHorizontalLines(false);
        table_disciplina.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(table_disciplina);
        table_disciplina.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        table_disciplina.getTableHeader().setOpaque(false);
        table_disciplina.setRowHeight(20);
        if (table_disciplina.getColumnModel().getColumnCount() > 0) {
            table_disciplina.getColumnModel().getColumn(0).setPreferredWidth(60);
            table_disciplina.getColumnModel().getColumn(3).setPreferredWidth(30);
            table_disciplina.getColumnModel().getColumn(4).setPreferredWidth(60);
        }

        jScrollPane5.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        table_turma.setFont(new java.awt.Font("Segoe UI Semibold", 1, 10)); // NOI18N
        table_turma.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Estudante", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_turma.setToolTipText("");
        table_turma.setFocusable(false);
        table_turma.setGridColor(new java.awt.Color(0, 0, 0));
        table_turma.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table_turma.setPreferredSize(new java.awt.Dimension(278, 287));
        table_turma.setRowHeight(18);
        table_turma.setSelectionBackground(new java.awt.Color(232, 180, 88));
        table_turma.setShowGrid(true);
        table_turma.setShowHorizontalLines(false);
        table_turma.getTableHeader().setReorderingAllowed(false);
        table_turma.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_turmaMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(table_turma);
        table_turma.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        table_turma.getTableHeader().setOpaque(false);
        table_turma.setRowHeight(18);

        combo_sala.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "101", "201", "301", "401", "501", "601", "701", "801", "901", "101EM", "201EM", "301EM"}));
        combo_sala.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_salaItemStateChanged(evt);
            }
        });

        combo_curso.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fundamental", "Médio" }));
        combo_curso.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                combo_cursoItemStateChanged(evt);
            }
        });

        notas_button.setText("Registrar Nota");
        notas_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                notas_buttonMouseClicked(evt);
            }
        });

        jScrollPane6.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        table_desempenho.setFont(new java.awt.Font("Segoe UI Semibold", 1, 10)); // NOI18N
        table_desempenho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "1º Tri", "F", "2º Tri", "F", "3º Tri", "F", "Avaliação Final", "F"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_desempenho.setToolTipText("");
        table_desempenho.setFocusable(false);
        table_desempenho.setGridColor(new java.awt.Color(0, 0, 0));
        table_desempenho.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table_desempenho.setPreferredSize(new java.awt.Dimension(278, 287));
        table_desempenho.setRowHeight(18);
        table_desempenho.setSelectionBackground(new java.awt.Color(232, 180, 88));
        table_desempenho.setShowGrid(true);
        table_desempenho.setShowHorizontalLines(false);
        table_desempenho.getTableHeader().setReorderingAllowed(false);
        table_desempenho.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                table_desempenhoMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(table_desempenho);

        table_frequencia.setFont(new java.awt.Font("Segoe UI Semibold", 1, 10)); // NOI18N
        table_frequencia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Disciplina", "Data"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table_frequencia.setFocusable(false);
        table_frequencia.setGridColor(new java.awt.Color(0, 0, 0));
        table_frequencia.setIntercellSpacing(new java.awt.Dimension(0, 0));
        table_frequencia.setRowHeight(18);
        table_frequencia.setSelectionBackground(new java.awt.Color(232, 180, 88));
        table_frequencia.setShowGrid(true);
        table_frequencia.setShowHorizontalLines(false);
        jScrollPane2.setViewportView(table_frequencia);

        jLabel2.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Boletim");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Faltas");

        jLabel4.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Alunos");

        falta_button.setText("Registrar Falta");
        falta_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                falta_buttonMouseClicked(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Notas (Aluno Selecionado)");

        javax.swing.GroupLayout tab_inicioLayout = new javax.swing.GroupLayout(tab_inicio);
        tab_inicio.setLayout(tab_inicioLayout);
        tab_inicioLayout.setHorizontalGroup(
            tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tab_inicioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tab_inicioLayout.createSequentialGroup()
                        .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(tab_inicioLayout.createSequentialGroup()
                                .addComponent(combo_curso, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addComponent(combo_sala, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tab_inicioLayout.createSequentialGroup()
                                .addComponent(falta_button, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
                                .addGap(83, 83, 83))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jScrollPane6)
                    .addGroup(tab_inicioLayout.createSequentialGroup()
                        .addComponent(notas_button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );
        tab_inicioLayout.setVerticalGroup(
            tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tab_inicioLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(combo_sala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(combo_curso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(falta_button))
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tab_inicioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(notas_button)
                    .addComponent(jLabel5))
                .addGap(0, 0, 0)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(1, 1, 1)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab_inicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tab_inicio, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void table_turmaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_turmaMouseClicked
            if(table_turma.getSelectionModel().isSelectionEmpty()) {
                return;
            } else {  
                try {
                    fillFrequencia((String) table_turma.getValueAt(table_turma.getSelectedRow(), 0));
                    getBoletim(LoginSessionProfessores.disciplina, (String) table_turma.getValueAt(table_turma.getSelectedRow(), 0), 0);
                    fillDisciplina(LoginSessionProfessores.disciplina, (String) table_turma.getValueAt(table_turma.getSelectedRow(), 0));
                } catch (SQLException ex) {
                    Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
                }
            }    
    }//GEN-LAST:event_table_turmaMouseClicked

    private void combo_salaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_salaItemStateChanged
        try {
            getTurma();
            if(table_turma.getSelectionModel().isSelectionEmpty()) {
                model_frequencia.setRowCount(0);
                model_disciplina.setRowCount(0);
                model_desempenho.setRowCount(0);
                return;
            } else {            
                fillFrequencia((String) table_turma.getValueAt(table_turma.getSelectedRow(), 0));
                getBoletim(LoginSessionProfessores.disciplina, (String) table_turma.getValueAt(table_turma.getSelectedRow(), 0), 0);
                fillDisciplina(LoginSessionProfessores.disciplina, (String) table_turma.getValueAt(table_turma.getSelectedRow(), 0));
            }    
        } catch (SQLException ex) {
            Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_combo_salaItemStateChanged

    private void combo_cursoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_combo_cursoItemStateChanged
        try {
            getTurma();
            if(table_turma.getSelectionModel().isSelectionEmpty()) {
                model_frequencia.setRowCount(0);
                model_disciplina.setRowCount(0);
                model_desempenho.setRowCount(0);
                return;
            } else {
                fillFrequencia((String) table_turma.getValueAt(table_turma.getSelectedRow(), 0));
                getBoletim(LoginSessionProfessores.disciplina, (String) table_turma.getValueAt(table_turma.getSelectedRow(), 0), 0);
                fillDisciplina(LoginSessionProfessores.disciplina, (String) table_turma.getValueAt(table_turma.getSelectedRow(), 0));
            }    
        } catch (SQLException ex) {
            Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_combo_cursoItemStateChanged

    private void table_desempenhoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_table_desempenhoMouseClicked

    }//GEN-LAST:event_table_desempenhoMouseClicked

    private void falta_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_falta_buttonMouseClicked
        try {
            Connection myConn = (Connection) MySQL_Connection.createConnection();
            
            Statement stInfo = myConn.createStatement();
            Statement stFalta = myConn.createStatement();
            
            ResultSet rs_info = stInfo.executeQuery("SELECT nome,idEstudante, salaTurma FROM estudante WHERE idEstudante = '" + model_turma.getValueAt(table_turma.getSelectedRow(), 0) + "'");
            
            String nome = null;
            String id = null;
            String turma = null;
            String data = null;
            String trimestre = null;
            
            while(rs_info.next()) {
                nome = rs_info.getString("nome");
                id = rs_info.getString("idEstudante");
                turma = rs_info.getString("salaTurma");
                data = LocalDate.now().toString();
            }
            
            int index = data.indexOf("-");
            String month = data.substring(index + 1, index + 3);
            int mes = Integer.parseInt(month);
            if(mes >= 2 && mes <= 4) {
                trimestre = "1";
            } else if(mes >= 5 && mes <= 7) {
                trimestre = "2";
            } else if(mes >= 8 && mes <= 10) {
                trimestre = "3";
            } else if (mes >= 11 && mes <= 12) {
                trimestre = "3";
            }
            
            Object[] options = { "Confirmar", "Cancelar" };
            int decision = JOptionPane.showOptionDialog(null, "Você confirma o registro de uma falta para:\n" +
                    "Nome: " + nome +
                    "\nID: " + id +
                    "\nTurma: " + turma +
                    "\nNo dia " + data + "?", "Registrar falta", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);
            if (decision == 0) {
                stFalta.executeUpdate("INSERT INTO faltas (idEstudante, disciplinaFalta, dataFalta, trimestre) values('" + id + "', '" + LoginSessionProfessores.disciplina + "', '" + data + "'," + trimestre + ");");
                fillFrequencia(id);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_falta_buttonMouseClicked

    private void notas_buttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notas_buttonMouseClicked
        try {
            Object[] options = { "Trabalho", "Avaliação", "Recuperação", "Bônus" };
            int tipo = JOptionPane.showOptionDialog(null, "Selecione o tipo de nota", "Registrar Nota", JOptionPane.DEFAULT_OPTION, JOptionPane.DEFAULT_OPTION, null, options, options[0]);
            double nota = Double.parseDouble(JOptionPane.showInputDialog("Insira a nota"));
            
            Connection myConn = (Connection) MySQL_Connection.createConnection();
            
            Statement stInfo = myConn.createStatement();
            Statement stNota = myConn.createStatement();
            
            ResultSet rs_info = stInfo.executeQuery("SELECT nome,idEstudante, salaTurma FROM estudante WHERE idEstudante = '" + model_turma.getValueAt(table_turma.getSelectedRow(), 0) + "'");
            
            String nome = null;
            String id = null;
            String turma = null;
            String data = null;
            String trimestre = null;
            
            while(rs_info.next()) {
                nome = rs_info.getString("nome");
                id = rs_info.getString("idEstudante");
                turma = rs_info.getString("salaTurma");
                data = LocalDate.now().toString();
            }
            
            int index = data.indexOf("-");
            String month = data.substring(index + 1, index + 3);
            int mes = Integer.parseInt(month);
            if(mes >= 2 && mes <= 4) {
                trimestre = "1";
            } else if(mes >= 5 && mes <= 7) {
                trimestre = "2";
            } else if(mes >= 8 && mes <= 10) {
                trimestre = "3";
            } else if (mes >= 11 && mes <= 12) {
                trimestre = "3";
            }
            
            Object[] options1 = { "Confirmar", "Cancelar" }; 
            int decision = JOptionPane.showOptionDialog(null, "Você confirma o registro de uma nota para:\n" +
                    "Nome: " + nome +
                    "\nID: " + id +
                    "\nTurma: " + turma +
                    "\nNota: " + nota +
                    "\nNo dia " + data + "?", "Registrar Nota", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options1, options1[0]);
            if (decision == 0) {
                stNota.executeUpdate("INSERT INTO nota (idEstudante, disciplinaNota, tipoNota, dataNota, trimestre, nota) values('" +
                        id +
                        "', '" +
                        LoginSessionProfessores.disciplina +
                        "', " +
                        (tipo + 1) +
                        ", '" +
                        data +
                        "', " +
                        trimestre +
                        ", " +
                        nota +
                        ");");
                getBoletim(LoginSessionProfessores.disciplina, id, 0);
                fillDisciplina(LoginSessionProfessores.disciplina, id);
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_notas_buttonMouseClicked
    
    private void getBoletim(String disciplina, String idEstudante, int row) {
        try {
            Connection myConn = (Connection) MySQL_Connection.createConnection();
            
            Statement stMedia1 = myConn.createStatement();
            Statement stMedia2 = myConn.createStatement();
            Statement stMedia3 = myConn.createStatement();
            Statement stMediaFinal = myConn.createStatement();
        
            Statement stFaltas1 = myConn.createStatement();
            Statement stFaltas2 = myConn.createStatement();
            Statement stFaltas3 = myConn.createStatement();
            Statement stFaltasFinal = myConn.createStatement();
           
            ResultSet media1 = stMedia1.executeQuery("SELECT TRUNCATE(AVG(nota), 2) AS medias1 FROM nota where disciplinaNota = '" + disciplina + "' and trimestre = 1 and tipoNota != 'Recuperação' and idEstudante = " + idEstudante);
            ResultSet media2 = stMedia2.executeQuery("SELECT TRUNCATE(AVG(nota), 2) AS medias2 FROM nota where disciplinaNota = '" + disciplina + "' and trimestre = 2 and tipoNota != 'Recuperação' and idEstudante = " + idEstudante);
            ResultSet media3 = stMedia3.executeQuery("SELECT TRUNCATE(AVG(nota), 2) AS medias3 FROM nota where disciplinaNota = '" + disciplina + "' and trimestre = 3 and tipoNota != 'Recuperação' and idEstudante = " + idEstudante);
            ResultSet mediaFinal = stMediaFinal.executeQuery("SELECT TRUNCATE(AVG(nota), 2) AS mediaFinal FROM nota where disciplinaNota = '" + disciplina + "' and tipoNota != 'Recuperação' and idEstudante = " + idEstudante);
        
            ResultSet faltas1 = stFaltas1.executeQuery("SELECT COUNT(idFalta) AS faltas1 FROM faltas WHERE disciplinaFalta = '" + disciplina + "' and idEstudante = " + idEstudante + " and trimestre = 1");
            ResultSet faltas2 = stFaltas2.executeQuery("SELECT COUNT(idFalta) AS faltas2 FROM faltas WHERE disciplinaFalta = '" + disciplina + "' and idEstudante = " + idEstudante + " and trimestre = 2");
            ResultSet faltas3 = stFaltas3.executeQuery("SELECT COUNT(idFalta) AS faltas3 FROM faltas WHERE disciplinaFalta = '" + disciplina + "' and idEstudante = " + idEstudante + " and trimestre = 3");
            ResultSet faltasFinal = stFaltasFinal.executeQuery("SELECT count(idFalta) AS faltasFinal FROM faltas WHERE disciplinaFalta = '" + disciplina + "' and idEstudante = " + idEstudante);
        
            media1.next();
            media2.next();
            media3.next();
            mediaFinal.next();
        
            faltas1.next();
            faltas2.next();
            faltas3.next();
            faltasFinal.next();
        
            String valueFaltas1 = faltas1.getString("faltas1");
            String valueFaltas2 = faltas2.getString("faltas2");
            String valueFaltas3 = faltas3.getString("faltas3");
            String valueFaltasFinal = faltasFinal.getString("faltasFinal");
        
            String valueMedia = media1.getString("medias1");
            String valueMedia2 = media2.getString("medias2");
            String valueMedia3 = media3.getString("medias3");
            String valueFinal = mediaFinal.getString("mediaFinal");
            
            model_desempenho.addRow(new Object[]{null, null, null, null, null, null, null, null, null});
            model_desempenho.setValueAt(disciplina, row, 0);
            
            model_desempenho.setValueAt(valueMedia, row, 1);
            model_desempenho.setValueAt(valueFaltas1, row, 2);

            model_desempenho.setValueAt(valueMedia2, row, 3);
            model_desempenho.setValueAt(valueFaltas2, row, 4);

            model_desempenho.setValueAt(valueMedia3, row, 5);
            model_desempenho.setValueAt(valueFaltas3, row, 6);

            model_desempenho.setValueAt(valueFinal, row, 7);
            model_desempenho.setValueAt(valueFaltasFinal, row, 8);
        }            
        catch (SQLException ex) {
            Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void fillDisciplina(String select_disciplina, String idEstudante) {
        try {
            Connection myConn = (Connection) MySQL_Connection.createConnection();
            Statement statement = myConn.createStatement();
            
            ResultSet notas = statement.executeQuery("SELECT * from nota where idEstudante = '" + idEstudante + "' and disciplinaNota = '" + select_disciplina + "' ORDER BY dataNota desc");  
            
            model_disciplina.setRowCount(0);
                     
            while(notas.next())
            {
                String disciplina = notas.getString("disciplinaNota");
                String tipo = notas.getString("tipoNota");
                String data = notas.getString("dataNota");
                double nota = notas.getDouble("nota");
                String trimestre = notas.getString("trimestre");
                
                Object dadosNota[] = {disciplina, tipo, trimestre, data, nota};
                
                model_disciplina.addRow(dadosNota);
            }
        } catch (SQLException ex) {
            Logger.getLogger(page_turmas.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void fillFrequencia(String idEstudante) throws SQLException 
    {
        Connection myConn = (Connection) MySQL_Connection.createConnection();
        Statement statement = myConn.createStatement();
        
        ResultSet faltas = statement.executeQuery("SELECT * from faltas where idEstudante = '" + idEstudante + "' and disciplinaFalta = '" + LoginSessionProfessores.disciplina + "' ORDER BY dataFalta desc");

        model_frequencia.setRowCount(0);
        
        while(faltas.next())
        {
            String disciplina = LoginSessionProfessores.disciplina;
            String data = faltas.getString("dataFalta");
            
            Object dadosFalta[] = {disciplina, data};  
            
            model_frequencia.addRow(dadosFalta);
        } 
    }    
    
    private void getTurma() throws SQLException 
    {
        Connection myConn = (Connection) MySQL_Connection.createConnection();
        
        Statement st_alunos = myConn.createStatement();
        
        model_turma.setRowCount(0);
        
        ResultSet rs_alunos = st_alunos.executeQuery("SELECT nome, idEstudante FROM estudante WHERE salaTurma = '" + combo_sala.getSelectedItem() + "' AND escolaridade = '" + combo_curso.getSelectedItem() + "'");        
        while (rs_alunos.next()) {
            Object nome[] = {rs_alunos.getString("idEstudante"), rs_alunos.getString("nome")};
            model_turma.addRow(nome);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> combo_curso;
    private javax.swing.JComboBox<String> combo_sala;
    private javax.swing.JButton falta_button;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton notas_button;
    private javax.swing.JPanel tab_inicio;
    private javax.swing.JTable table_desempenho;
    private javax.swing.JTable table_disciplina;
    private javax.swing.JTable table_frequencia;
    private javax.swing.JTable table_turma;
    // End of variables declaration//GEN-END:variables
}
